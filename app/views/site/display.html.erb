<canvas id="canvas" width="900" height="500"></canvas>

<script>

  $(document).on('ready', function(){
    var width = $(window).width();
    var height = $(window).height();


    // initialize canvas

    var canvas = document.getElementById('canvas');
    canvas.width = width;
    canvas.height = height;

    var c = canvas.getContext("2d");

    var circleHeight = height / 2;
    var textHeight = height / 2 - 140;
    var lightWidth = width / 2 - 350;
    var temperatureWidth = width / 2;
    var soundWidth = width / 2 + 350;

    c.fillStyle = 'black';
    c.font="bold 30px Arial";

    var text = "Light";
    var textWidth = c.measureText(text).width;
    c.fillText("Light", lightWidth - textWidth/2, textHeight);

    text = "Temperature";
    textWidth = c.measureText(text).width;
    c.fillText("Temperature", temperatureWidth - textWidth/2, textHeight);
    
    text = "Sound";
    textWidth = c.measureText(text).width;
    c.fillText("Sound", soundWidth - textWidth/2, textHeight);

    c.fillStyle = '0010C2';
    c.beginPath();
    c.arc(lightWidth, circleHeight, 90, 0, Math.PI * 2, true);
    c.fill();

    c.beginPath();
    c.arc(temperatureWidth, circleHeight, 90, 0, Math.PI * 2, true);
    c.fill();

    c.beginPath();
    c.arc(soundWidth, circleHeight, 90, 0, Math.PI * 2, true);
    c.fill();


    // set AJAX calls for sensor inputs

    var counter = 5000;
    var ajaxCall = function() {
      // counter --;
      // if ( counter === 0 ) {
      //   clearInterval(ajaxCallInterval);
      // } else {
      //   console.log("Counter: " + counter);
      // }
      $.ajax({
        type: 'GET',
        url: '/input.json',
        async: true, // take out
        success: function(data){
          console.log("Light: " + data.light);
          console.log("Temperature: " + data.temperature);
          console.log("Sound: " + data.sound);
          console.log("Volume: " + data.volume);
          updateLight(data.light);
          updateTemperature(data.temperature);
          updateVolume(data.volume);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) { 
          console.log("Status: " + textStatus);
          console.log("Error: " + errorThrown); 
        }
      })
    };

    var ajaxCallInterval = setInterval(ajaxCall, 100);


    // initialize input history circular buffers

    createCircularBuffer("lightHistory", 30);
    createCircularBuffer("tempHistory", 30);
    createCircularBuffer("volumeHistory", 30);
    createCircularBuffer("soundHistory", 30);


    // canvas update functions

    function updateLight(light) {
      updateBuffer(lightHistory, light);
      var red = map(light, 400, 1000, 0, 48);
      var green = map(light, 400, 1000, 8, 133);
      var blue = map(light, 400, 1000, 97, 227);
      c.fillStyle = 'rgb(' + red + ',' + green + ',' + blue +')';
      c.beginPath();
      c.arc(lightWidth, circleHeight, 90, 0, Math.PI * 2, true);
      c.fill();
    };

    function updateTemperature(temp) {
      updateBuffer(tempHistory, temp);
      var red = map(temp, 120, 190, 0, 48);
      var green = map(temp, 120, 190, 0, 133);
      var blue = map(temp, 120, 190, 0, 227);
      c.fillStyle = 'rgb(' + red + ',' + green + ',' + blue +')';
      c.beginPath();
      c.arc(temperatureWidth, circleHeight, 90, 0, Math.PI * 2, true);
      c.fill();
    };

    function updateVolume(volume) {
      updateBuffer(volumeHistory, volume);
      var red = map(volume, 500, 800, 0, 48);
      var green = map(volume, 500, 800, 0, 133);
      var blue = map(volume, 500, 800, 0, 227);
      c.fillStyle = 'rgb(' + red + ',' + green + ',' + blue +')';
      c.beginPath();
      c.arc(soundWidth, circleHeight, 90, 0, Math.PI * 2, true);
      c.fill();
    };

    // function updateSound(sound) {
    //   updateBuffer(soundHistory, sound);
    //   switch(true)
    //   {
    //   case (sound === 1):
    //     c.fillStyle = 'red';
    //     break;
    //   default:
    //     c.fillStyle = 'grey';
    //   }

    //   c.beginPath();
    //   c.arc(soundWidth, circleHeight, 90, 0, Math.PI * 2, true);
    //   c.fill();
    // };


    // other function implementations

    function map(value, lower1, upper1, lower2, upper2) {
      var result;
      if ( lower1 == upper1 || lower2 == upper2 ) {
        return null;
      }
      else {
        var percentage = ( value - lower1 ) / ( upper1 - lower1 );
        var newValue = percentage * ( upper2 - lower2 ) + lower2;
        return Math.round(newValue);
      }
    };

    function createCircularBuffer(bufferName, bufferLength){ // string, number
      window[bufferName] = [];
      for ( var i = 0; i < bufferLength; i++ ) {
        window[bufferName].push(null);
      }
      window[bufferName].pointer = 0;
    }

    function updateBuffer(buffer, value){ // variable, number
      buffer[buffer.pointer] = value;
      if ( buffer.pointer < buffer.length - 1 ) {
        buffer.pointer ++;
      } else {
        buffer.pointer = 0;
      }
    }

    function getBufferHistory(buffer) { // variable
      var history = [];
      for ( var i = 0; i < buffer.length; i++ ) {
        if ( buffer[buffer.pointer] ) history.push(buffer[buffer.pointer]);
        if ( buffer.pointer < buffer.length - 1 ) {
          buffer.pointer ++;
        } else {
          buffer.pointer = 0;
        }
      }
      return history;
    }

  });

</script>